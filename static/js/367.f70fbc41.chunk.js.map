{"version":3,"file":"static/js/367.f70fbc41.chunk.js","mappings":"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","sources":["components/EVM.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Card, Row, Col, Tab, Nav, Badge, Alert } from 'react-bootstrap';\r\nimport { Database, Server, Cpu, HardDrive, Shield, Gauge, Code, ArrowRight } from 'lucide-react';\r\n\r\n\r\nfunction Evm() {\r\n  const [activeTab, setActiveTab] = useState('storage');\r\n  const storageExamples = [\r\n    {\r\n      id: 1,\r\n      title: 'Basic Storage Layout !',\r\n      description: 'Contract with various data types showing storage slot allocation !',\r\n      code: `contract X {\r\n      uint256 public a = 1;  // Slot 0\r\n      uint128 public b = 2;  // Slot 1 (partially filled)\r\n      uint128 public c = 3;  // Slot 1 (same as 'b', packed)\r\n      bool public d = true;  // Slot 2 (partially filled)\r\n      address public e = msg.sender; // Slot 3\r\n  \r\n      struct Data {\r\n          uint256 x;\r\n          uint256 y;\r\n      }\r\n      Data public data = Data(10, 20); // Slot 4 & 5\r\n  \r\n      mapping(address => uint256) public balances; // keccak256(slot)\r\n      string public text = \"Hello\"; // Reference in slot 6\r\n  }`,\r\n      slots: [\r\n        { id: 0, content: 'uint256 a (32 bytes)', color: 'primary' },\r\n        { id: 1, content: 'uint128 b + uint128 c (16 + 16 bytes)', color: 'success' },\r\n        { id: 2, content: 'bool d (1 byte)', color: 'warning' },\r\n        { id: 3, content: 'address e (20 bytes)', color: 'info' },\r\n        { id: 4, content: 'Data.x (32 bytes)', color: 'danger' },\r\n        { id: 5, content: 'Data.y (32 bytes)', color: 'danger' },\r\n        { id: 6, content: 'text reference', color: 'secondary' }\r\n      ]\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Struct Packing',\r\n      description: 'Efficient struct layout with packed variables',\r\n      code: `contract X {\r\n      struct User {\r\n          uint128 id;   // 16 bytes\r\n          bool active;  // 1 byte\r\n          uint8 level;  // 1 byte\r\n          uint256 score; // 32 bytes (New slot)\r\n      }\r\n  }`,\r\n      slots: [\r\n        { id: 0, content: 'id (16 bytes) + active (1 byte) + level (1 byte)', color: 'success' },\r\n        { id: 1, content: 'score (32 bytes)', color: 'primary' }\r\n      ]\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Mapping Storage !',\r\n      description: 'How mappings are stored using keccak256',\r\n      code: `contract X {\r\n      mapping(address => uint256) public balances;  // Slot 0\r\n      \r\n      function setBalance(address user, uint256 amount) public {\r\n          balances[user] = amount;\r\n      }\r\n  }`,\r\n      slots: [\r\n        { id: 0, content: 'mapping slot identifier', color: 'info' },\r\n        { id: 'n', content: 'keccak256(key + slot) => value', color: 'warning' }\r\n      ]\r\n    }\r\n  ];\r\n  \r\n  const gasOptimizations = [\r\n    {\r\n      title: 'Variable Packing',\r\n      description: 'Optimize storage by packing variables efficiently',\r\n      unsafe: `uint128 a; // Slot 0\r\n  uint256 b; // Slot 1\r\n  uint128 c; // Slot 2`,\r\n      safe: `uint128 a; // Slot 0\r\n  uint128 c; // Slot 0 (packed)\r\n  uint256 b; // Slot 1`\r\n    }\r\n  ];\r\n  \r\n  const rules = [\r\n    {\r\n      icon: <Database size={24} />,\r\n      text: 'Every storage slot can store up to 32 bytes of data'\r\n    },\r\n    {\r\n      icon: <HardDrive size={24} />,\r\n      text: 'If a variable is â‰¤ 32 bytes, it fits into a single slot'\r\n    },\r\n    {\r\n      icon: <Server size={24} />,\r\n      text: 'If a variable is > 32 bytes, it gets its own slot and additional storage'\r\n    }\r\n  ];\r\n  \r\n  return (\r\n    <Container className=\"py-5\">\r\n      <div className=\"d-flex align-items-center gap-3 mb-4\">\r\n        <Cpu size={32} className=\"text-primary\" />\r\n        <h1 className=\"mb-0\">Ethereum Virtual Machine (EVM)</h1>\r\n      </div>\r\n\r\n      <Tab.Container activeKey={activeTab} onSelect={(k) => setActiveTab(k)}>\r\n        <Nav variant=\"tabs\" className=\"mb-4\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"storage\" className=\"d-flex align-items-center gap-2\">\r\n              <Database size={18} />\r\n              Storage Layout\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"gas\" className=\"d-flex align-items-center gap-2\">\r\n              <Gauge size={18} />\r\n              Gas Optimization\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"rules\" className=\"d-flex align-items-center gap-2\">\r\n              <Shield size={18} />\r\n              Storage Rules\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n\r\n        <Tab.Content>\r\n          <Tab.Pane eventKey=\"storage\">\r\n            {storageExamples.map((example) => (\r\n              <Card key={example.id} className=\"mb-4\">\r\n                <Card.Header>\r\n                  <h3 className=\"h5 mb-0\">{example.title}</h3>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  <p className=\"text-muted\">{example.description}</p>\r\n                  \r\n                  <Row className=\"mb-4\">\r\n                    <Col md={6}>\r\n                      <h4 className=\"h6 mb-3 d-flex align-items-center gap-2\">\r\n                        <Code size={18} />\r\n                        Contract Code\r\n                      </h4>\r\n                      <pre className=\"bg-light p-3 rounded\">\r\n                        <code>{example.code}</code>\r\n                      </pre>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <h4 className=\"h6 mb-3 d-flex align-items-center gap-2\">\r\n                        <Database size={18} />\r\n                        Storage Slots\r\n                      </h4>\r\n                      {example.slots.map((slot) => (\r\n                        <Alert key={slot.id} variant={slot.color} className=\"d-flex align-items-center mb-2\">\r\n                          <strong className=\"me-2\">Slot {slot.id}:</strong> {slot.content}\r\n                        </Alert>\r\n                      ))}\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n          </Tab.Pane>\r\n\r\n          <Tab.Pane eventKey=\"gas\">\r\n            {gasOptimizations.map((opt, index) => (\r\n              <Card key={index} className=\"mb-4\">\r\n                <Card.Header>\r\n                  <h3 className=\"h5 mb-0\">{opt.title}</h3>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  <p className=\"text-muted\">{opt.description}</p>\r\n                  \r\n                  <Row>\r\n                    <Col md={5}>\r\n                      <Badge bg=\"danger\" className=\"mb-2\">Unsafe</Badge>\r\n                      <pre className=\"bg-light p-3 rounded\">\r\n                        <code>{opt.unsafe}</code>\r\n                      </pre>\r\n                    </Col>\r\n                    <Col md={2} className=\"d-flex align-items-center justify-content-center\">\r\n                      <ArrowRight size={24} />\r\n                    </Col>\r\n                    <Col md={5}>\r\n                      <Badge bg=\"success\" className=\"mb-2\">Safe</Badge>\r\n                      <pre className=\"bg-light p-3 rounded\">\r\n                        <code>{opt.safe}</code>\r\n                      </pre>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n          </Tab.Pane>\r\n\r\n          <Tab.Pane eventKey=\"rules\">\r\n            <Card>\r\n              <Card.Body>\r\n                <Row>\r\n                  {rules.map((rule, index) => (\r\n                    <Col md={4} key={index}>\r\n                      <div className=\"d-flex align-items-center gap-3 mb-4\">\r\n                        <div className=\"bg-primary bg-opacity-10 p-3 rounded\">\r\n                          {rule.icon}\r\n                        </div>\r\n                        <p className=\"mb-0\">{rule.text}</p>\r\n                      </div>\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n      </Tab.Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Evm;"],"names":["activeTab","setActiveTab","useState","storageExamples","id","title","description","code","slots","content","color","gasOptimizations","unsafe","safe","rules","icon","_jsx","Database","size","text","HardDrive","Server","_jsxs","Container","className","children","Cpu","Tab","activeKey","onSelect","k","Nav","variant","Item","Link","eventKey","Gauge","Shield","Content","Pane","map","example","Card","Header","Body","Row","Col","md","Code","slot","Alert","opt","index","Badge","bg","ArrowRight","rule"],"sourceRoot":""}