/*! For license information please see 66.0b12a6bc.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[66],{4066:(e,n,r)=>{r.r(n),r.d(n,{default:()=>o});r(5043);var s=r(457);const a=(0,r(7784).A)("CircleCheckBig",[["path",{d:"M21.801 10A10 10 0 1 1 17 3.335",key:"yps3ct"}],["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}]]);var t=r(579);const o=()=>(0,t.jsxs)(s.A.Item,{eventKey:"0",children:[(0,t.jsxs)(s.A.Header,{children:[(0,t.jsx)(a,{className:"me-2"})," ERC20 Protocol"]}),(0,t.jsxs)(s.A.Body,{children:[(0,t.jsx)("p",{className:"text-muted",children:"The ERC20 protocol is a widely adopted standard for fungible tokens on the Ethereum blockchain. It defines a set of functions and events that allow for the creation, transfer, and approval of tokens. This protocol ensures interoperability between different tokens and smart contracts."}),(0,t.jsxs)("p",{children:[(0,t.jsx)("strong",{children:"Purpose of the ERC20 Protocol:"})," The ERC20 token standard facilitates the seamless exchange and interoperability of tokens within the Ethereum ecosystem. It enables users to send, receive, and approve token transactions securely and efficiently."]}),(0,t.jsxs)("p",{children:[(0,t.jsx)("strong",{children:"Functions in ERC20 Protocol:"}),(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"totalSupply()"}),": Returns the total supply of tokens in circulation."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"balanceOf(address account)"}),": Retrieves the token balance of a given address."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"transfer(address recipient, uint256 amount)"}),": Transfers a specified amount of tokens from the sender's balance to the recipient."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"approve(address spender, uint256 amount)"}),": Grants permission for another address to spend a specific amount of tokens on behalf of the sender."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"allowance(address owner, address spender)"}),": Returns the remaining amount of tokens that a spender is allowed to spend on behalf of the owner."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"decreaseAllowance(address spender, substract value)"}),": Decrease the allowance of a user."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"increaseAllowance(address spender, adding value)"}),": Increase the allowance of a user."]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("code",{children:"transferFrom(address sender, address recipient, uint256 amount)"}),": Transfers tokens from one address to another, based on prior approval."]})]})]}),(0,t.jsx)("pre",{children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyERC20Token {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor(string memory _name, string memory _symbol, uint256 initialSupply, uint8 _decimals) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = initialSupply * (10 ** uint256(decimals));\n        _balances[msg.sender] = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(recipient != address(0), "ERC20: transfer to the zero address");\n        require(_balances[msg.sender] >= amount, "ERC20: transfer amount exceeds balance");\n\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        require(spender != address(0), "ERC20: approve to the zero address");\n\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(sender != address(0), "ERC20: transfer from the zero address");\n        require(recipient != address(0), "ERC20: transfer to the zero address");\n        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");\n        require(_allowances[sender][msg.sender] >= amount, "ERC20: transfer amount exceeds allowance");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        _allowances[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0), "ERC20: increase allowance for the zero address");\n        _allowances[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0), "ERC20: decrease allowance for the zero address");\n        require(_allowances[msg.sender][spender] >= subtractedValue, "ERC20: decreased allowance below zero");\n        _allowances[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public {\n        require(account != address(0), "ERC20: mint to the zero address");\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function burn(uint256 amount) public {\n        require(_balances[msg.sender] >= amount, "ERC20: burn amount exceeds balance");\n        _balances[msg.sender] -= amount;\n        _totalSupply -= amount;\n        emit Burn(msg.sender, amount);\n        emit Transfer(msg.sender, address(0), amount);\n    }\n}\n        '})]})]})},7784:(e,n,r)=>{r.d(n,{A:()=>d});var s=r(5043);const a=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.filter(((e,n,r)=>Boolean(e)&&""!==e.trim()&&r.indexOf(e)===n)).join(" ").trim()};var t={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const o=(0,s.forwardRef)(((e,n)=>{let{color:r="currentColor",size:o=24,strokeWidth:d=2,absoluteStrokeWidth:i,className:l="",children:c,iconNode:u,...p}=e;return(0,s.createElement)("svg",{ref:n,...t,width:o,height:o,stroke:r,strokeWidth:i?24*Number(d)/Number(o):d,className:a("lucide",l),...p},[...u.map((e=>{let[n,r]=e;return(0,s.createElement)(n,r)})),...Array.isArray(c)?c:[c]])})),d=(e,n)=>{const r=(0,s.forwardRef)(((r,t)=>{let{className:d,...i}=r;return(0,s.createElement)(o,{ref:t,iconNode:n,className:a(`lucide-${l=e,l.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,d),...i});var l}));return r.displayName=`${e}`,r}}}]);
//# sourceMappingURL=66.0b12a6bc.chunk.js.map